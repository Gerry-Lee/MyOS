!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARDStruct	boot/loader.asm	/^    ARDStruct       equ BaseOfLoaderPhyAddr + _ARDStruct$/;"	d
ASM	Makefile	/^ASM		= nasm$/;"	m
ASMBFLAGS	Makefile	/^ASMBFLAGS	= -I boot\/include\/$/;"	m
ASMKFLAGS	Makefile	/^ASMKFLAGS	= -I include\/ -f elf$/;"	m
BaseOfLoader	boot/boot.asm	/^BaseOfLoader      equ  09000h$/;"	d
BaseOfStack	boot/boot.asm	/^BaseOfStack       equ  07c00h  ; 堆栈基地址(栈底, 从这个位置向低地址生长)$/;"	d
BaseOfStack	boot/loader.asm	/^BaseOfStack       equ  0100h  ; 堆栈基地址(栈底, 从这个位置向低地址生长)$/;"	d
CC	Makefile	/^CC		= gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS		= -I include\/ -c -fno-builtin -fno-stack-protector$/;"	m
DASM	Makefile	/^DASM		= ndisasm$/;"	m
DASMFLAGS	Makefile	/^DASMFLAGS	= -u -o $(ENTRYPOINT) -e $(ENTRYOFFSET)$/;"	m
DASMOUTPUT	Makefile	/^DASMOUTPUT	= kernel.bin.asm$/;"	m
DA_32	include/protect.h	50;"	d
DA_386CGate	include/protect.h	68;"	d
DA_386IGate	include/protect.h	69;"	d
DA_386TGate	include/protect.h	70;"	d
DA_386TSS	include/protect.h	67;"	d
DA_C	include/protect.h	60;"	d
DA_CCO	include/protect.h	62;"	d
DA_CCOR	include/protect.h	63;"	d
DA_CR	include/protect.h	61;"	d
DA_DPL0	include/protect.h	52;"	d
DA_DPL1	include/protect.h	53;"	d
DA_DPL2	include/protect.h	54;"	d
DA_DPL3	include/protect.h	55;"	d
DA_DR	include/protect.h	57;"	d
DA_DRW	include/protect.h	58;"	d
DA_DRWA	include/protect.h	59;"	d
DA_LDT	include/protect.h	65;"	d
DA_LIMIT_4K	include/protect.h	51;"	d
DA_TaskGate	include/protect.h	66;"	d
DESCRIPTOR	include/protect.h	/^}DESCRIPTOR;$/;"	t	typeref:struct:s_descriptor
Desc_Flag_c	boot/loader.asm	/^Desc_Flag_c:  Descriptor   0,      0fffffh,  DA_CR|DA_32|DA_LIMIT_4K  ;  0-4G$/;"	l
Desc_Flag_rw	boot/loader.asm	/^Desc_Flag_rw: Descriptor   0,      0fffffh,  DA_DRW|DA_32|DA_LIMIT_4K ;  0-4G$/;"	l
Desc_Video	boot/loader.asm	/^Desc_Video:   Descriptor 0B8000h,  0ffffh ,  DA_DRW|DA_DPL3       ;显存首地址$/;"	l
DispAL	boot/loader.asm	/^DispAL:$/;"	l
DispInt	boot/loader.asm	/^DispInt:$/;"	l
DispMemInfo	boot/loader.asm	/^	DispMemInfo:$/;"	l
DispPMStr	boot/loader.asm	/^DispPMStr:$/;"	l
DispReturn	boot/loader.asm	/^DispReturn:$/;"	l
ENTRYOFFSET	Makefile	/^ENTRYOFFSET	=   0x400$/;"	m
ENTRYPOINT	Makefile	/^ENTRYPOINT	= 0x30400$/;"	m
EXTERN	include/const.h	5;"	d
EXTERN	include/global.h	5;"	d
EXTERN	include/global.h	6;"	d
FALSE	include/const.h	35;"	d
GATE	include/protect.h	/^}GATE;$/;"	t	typeref:struct:s_gate
GDT	boot/loader.asm	/^GDT:          Descriptor   0,          0,       0      ;空描述符$/;"	l
GDT_SIZE	include/const.h	12;"	d
GLOBAL_VARIABLES_HERE	kernel/global.c	3;"	d	file:
GdtLen	boot/loader.asm	/^GdtLen   equ  $ - GDT $/;"	d
GdtPtr	boot/loader.asm	/^GdtPtr   dw   GdtLen - 1                  ;段界限$/;"	d
Get	boot/boot.asm	/^Get:$/;"	l
Get	boot/loader.asm	/^Get:$/;"	l
GetFat	boot/boot.asm	/^GetFat:$/;"	l
GetFat	boot/loader.asm	/^GetFat:$/;"	l
Goon_Loading	boot/boot.asm	/^Goon_Loading:$/;"	l
Goon_Loading	boot/loader.asm	/^Goon_Loading:$/;"	l
IDT_SIZE	include/const.h	13;"	d
INDEX_DUMMY	include/protect.h	8;"	d
INDEX_FLAT_C	include/protect.h	9;"	d
INDEX_FLAT_RW	include/protect.h	10;"	d
INDEX_LDT_FIRST	include/protect.h	13;"	d
INDEX_TSS	include/protect.h	12;"	d
INDEX_VIDEO	include/protect.h	11;"	d
INT_M_CTL	include/const.h	16;"	d
INT_M_CTLMASK	include/const.h	17;"	d
INT_S_CTL	include/const.h	18;"	d
INT_S_CTLMASK	include/const.h	19;"	d
INT_VECTOR_BOUNDS	include/protect.h	80;"	d
INT_VECTOR_BREAKPOINT	include/protect.h	78;"	d
INT_VECTOR_COPROC_ERR	include/protect.h	90;"	d
INT_VECTOR_COPROC_NOT	include/protect.h	82;"	d
INT_VECTOR_COPROC_SEG	include/protect.h	84;"	d
INT_VECTOR_DEBUG	include/protect.h	76;"	d
INT_VECTOR_DIVIDE	include/protect.h	75;"	d
INT_VECTOR_DOUBLE_FAULT	include/protect.h	83;"	d
INT_VECTOR_INVAL_OP	include/protect.h	81;"	d
INT_VECTOR_INVAL_TSS	include/protect.h	85;"	d
INT_VECTOR_IRQ0	include/protect.h	92;"	d
INT_VECTOR_IRQ8	include/protect.h	93;"	d
INT_VECTOR_NMI	include/protect.h	77;"	d
INT_VECTOR_OVERFLOW	include/protect.h	79;"	d
INT_VECTOR_PAGE_FAULT	include/protect.h	89;"	d
INT_VECTOR_PROTECTION	include/protect.h	88;"	d
INT_VECTOR_SEG_NOT	include/protect.h	86;"	d
INT_VECTOR_STACK_FAULT	include/protect.h	87;"	d
InitKernel	boot/loader.asm	/^    InitKernel:$/;"	l
KERNEL	Makefile	/^KERNEL	= kernel.bin$/;"	m
KillMotor	boot/loader.asm	/^KillMotor:$/;"	l
LABEL_DATA	boot/loader.asm	/^	LABEL_DATA:$/;"	l
LABEL_PM_START	boot/loader.asm	/^	LABEL_PM_START:$/;"	l
LD	Makefile	/^LD		= ld$/;"	m
LDFLAGS	Makefile	/^LDFLAGS		= -s -Ttext $(ENTRYPOINT)$/;"	m
LDT_SIZE	include/protect.h	29;"	d
MAX_TASKS	include/process.h	36;"	d
MemChkBuf	boot/loader.asm	/^    MemChkBuf       equ BaseOfLoaderPhyAddr + _MemChkBuf$/;"	d
MemCpy	boot/loader.asm	/^    MemCpy:$/;"	l
OBJS	Makefile	/^OBJS		= kernel\/kernel.o kernel\/start.o kernel\/i8259.o kernel\/global.o kernel\/protect.o \\$/;"	m
ORANGESBOOT	Makefile	/^ORANGESBOOT	= boot\/boot.bin boot\/loader.bin$/;"	m
OffsetOfLoader	boot/boot.asm	/^OffsetOfLoader    equ  0100h$/;"	d
PRIVATE	include/const.h	9;"	d
PRIVILEGE_KRNL	include/const.h	22;"	d
PRIVILEGE_TASK	include/const.h	23;"	d
PRIVILEGE_USER	include/const.h	24;"	d
PROCESS	include/process.h	/^}PROCESS;$/;"	t	typeref:struct:s_proc
PUBLIC	include/const.h	8;"	d
RPL_KRNL	include/const.h	27;"	d
RPL_TASK	include/const.h	28;"	d
RPL_USER	include/const.h	29;"	d
Read	boot/boot.asm	/^Read: $/;"	l
Read	boot/loader.asm	/^Read: $/;"	l
ReadSector	boot/boot.asm	/^ReadSector: ;读取磁盘  从第AX个扇区开始 将cl个扇区读入到ES：BX中$/;"	l
ReadSector	boot/loader.asm	/^ReadSector: ;读取磁盘  从第AX个扇区开始 将cl个扇区读入到ES：BX中$/;"	l
SA_RPL0	include/protect.h	35;"	d
SA_RPL1	include/protect.h	36;"	d
SA_RPL2	include/protect.h	37;"	d
SA_RPL3	include/protect.h	38;"	d
SA_RPL_MASK	include/protect.h	34;"	d
SA_TIG	include/protect.h	46;"	d
SA_TIL	include/protect.h	47;"	d
SA_TI_MASK	include/protect.h	45;"	d
SELECTOR_DUMMY	include/protect.h	17;"	d
SELECTOR_FLAT_C	include/protect.h	18;"	d
SELECTOR_FLAT_RW	include/protect.h	19;"	d
SELECTOR_KERNEL_CS	include/protect.h	24;"	d
SELECTOR_KERNEL_DS	include/protect.h	25;"	d
SELECTOR_KERNEL_GS	include/protect.h	26;"	d
SELECTOR_LDT_FIRST	include/protect.h	22;"	d
SELECTOR_TSS	include/protect.h	21;"	d
SELECTOR_VIDEO	include/protect.h	20;"	d
STACK_FRAME	include/process.h	/^}STACK_FRAME;                 $/;"	t	typeref:struct:s_stackframe
STACK_SIZE_TESTA	include/process.h	39;"	d
STACK_SIZE_TOTAL	include/process.h	41;"	d
SecLoopCount	boot/boot.asm	/^SecLoopCount      db   14            ;根目录所占扇区数$/;"	d
SecLoopCount	boot/loader.asm	/^SecLoopCount      db   14            ;根目录所占扇区数$/;"	d
SetupPaging	boot/loader.asm	/^	SetupPaging:$/;"	l
SltFlagC	boot/loader.asm	/^SltFlagC   equ  Desc_Flag_c - GDT$/;"	d
SltFlagRW	boot/loader.asm	/^SltFlagRW  equ  Desc_Flag_rw - GDT$/;"	d
SltVideo	boot/loader.asm	/^SltVideo   equ  Desc_Video - GDT + SA_RPL3$/;"	d
StackSpace	boot/loader.asm	/^    StackSpace: times   1024    db  0$/;"	l
StackSpace	kernel/kernel.asm	/^StackSpace   resb  2 * 1024  ;resb用于声明未初始化的存储空间 resw  resd  resq$/;"	l
StackTop	kernel/kernel.asm	/^StackTop:    ;栈顶   堆栈内容向低地址扩展$/;"	l
TRUE	include/const.h	34;"	d
TSS	include/protect.h	/^}TSS;$/;"	t	typeref:struct:s_tss
TestA	kernel/main.c	/^void TestA()$/;"	f
TopOfStack	boot/loader.asm	/^    TopOfStack  equ BaseOfLoaderPhyAddr + $ ; 栈顶$/;"	d
_ARDStruct	boot/loader.asm	/^	_ARDStruct: ; Address Range Descriptor Structure$/;"	l
_CONST_H_	include/const.h	3;"	d
_MemChkBuf	boot/loader.asm	/^	_MemChkBuf: times   256 db  0$/;"	l
_PROTECT_H_	include/protect.h	3;"	d
_TYPE_H_	include/type.h	3;"	d
_dwBaseAddrHigh	boot/loader.asm	/^	  _dwBaseAddrHigh:      dd  0$/;"	d
_dwBaseAddrLow	boot/loader.asm	/^	  _dwBaseAddrLow:       dd  0$/;"	d
_dwDispPos	boot/loader.asm	/^	_dwDispPos: dd (80 * 6 + 0) * 2 ; 屏幕第 6 行, 第 0 列$/;"	d
_dwLengthHigh	boot/loader.asm	/^	  _dwLengthHigh:        dd  0$/;"	d
_dwLengthLow	boot/loader.asm	/^	  _dwLengthLow:         dd  0$/;"	d
_dwMCRNumber	boot/loader.asm	/^	_dwMCRNumber:   dd 0    ; Memory Check Result$/;"	d
_dwMemSize	boot/loader.asm	/^	_dwMemSize: dd 0$/;"	d
_dwType	boot/loader.asm	/^	  _dwType:          dd  0$/;"	d
_start	kernel/kernel.asm	/^_start:$/;"	l
_szMemChkTitle	boot/loader.asm	/^	_szMemChkTitle: db "BaseAddrL BaseAddrH LengthLow LengthHigh   Type", 0Ah, 0$/;"	d
_szRAMSize	boot/loader.asm	/^	_szRAMSize: db "RAM size:", 0$/;"	d
_szReturn	boot/loader.asm	/^	_szReturn:  db 0Ah, 0$/;"	d
attr	include/protect.h	/^	u8   attr;$/;"	m	struct:s_gate
attr1	include/protect.h	/^	u8  attr1;            \/*P(1) DPL(2) DT(1) TYPE(4)*\/$/;"	m	struct:s_descriptor
backlink	include/protect.h	/^	u32 backlink;$/;"	m	struct:s_tss
base_high	include/protect.h	/^	u8  base_high;$/;"	m	struct:s_descriptor
base_low	include/protect.h	/^	u16 base_low;$/;"	m	struct:s_descriptor
base_mid	include/protect.h	/^	u8  base_mid;$/;"	m	struct:s_descriptor
bounds_check	kernel/kernel.asm	/^bounds_check:$/;"	l
breakpoint_exception	kernel/kernel.asm	/^breakpoint_exception:$/;"	l
cmpfilename	boot/boot.asm	/^cmpfilename:    ;比较文件名称 lodsb --> si 自增或自减$/;"	l
cmpfilename	boot/loader.asm	/^cmpfilename:    ;比较文件名称 lodsb --> si 自增或自减$/;"	l
copr_error	kernel/kernel.asm	/^copr_error:$/;"	l
copr_not_available	kernel/kernel.asm	/^copr_not_available:$/;"	l
copr_seg_overrun	kernel/kernel.asm	/^copr_seg_overrun:$/;"	l
cr3	include/protect.h	/^	u32 cr3;$/;"	m	struct:s_tss
cs	include/process.h	/^		u32 cs;     \/* |                                    *\/$/;"	m	struct:s_stackframe
cs	include/protect.h	/^	u32 cs; $/;"	m	struct:s_tss
csinit	kernel/kernel.asm	/^csinit:$/;"	l
cstart	kernel/start.c	/^PUBLIC void cstart()$/;"	f
dcount	include/protect.h	/^    u8   dcount; \/* 该字段只在调用门描述符中有效。如果在利用调用门$/;"	m	struct:s_gate
dec	boot/boot.asm	/^	dec dx$/;"	d
dec	boot/boot.asm	/^    dec dx$/;"	d
dec	boot/loader.asm	/^	dec dx$/;"	d
dec	boot/loader.asm	/^    dec dx$/;"	d
delay	lib/klib.c	/^PUBLIC void delay(int time)$/;"	f
disp_color_str	lib/kliba.asm	/^disp_color_str:$/;"	l
disp_int	lib/klib.c	/^PUBLIC void disp_int(int input)$/;"	f
disp_pos	include/global.h	/^EXTERN    int          disp_pos;$/;"	v
disp_str	lib/kliba.asm	/^disp_str:$/;"	l
divide_error	kernel/kernel.asm	/^divide_error:$/;"	l
double_fault	kernel/kernel.asm	/^double_fault:$/;"	l
ds	include/process.h	/^		u32 ds;     \/* |                                    *\/$/;"	m	struct:s_stackframe
ds	include/protect.h	/^	u32 ds; $/;"	m	struct:s_tss
dw	boot/boot.asm	/^dw     0xaa55            ;引导扇区结束标志$/;"	l
dwBaseAddrHigh	boot/loader.asm	/^        dwBaseAddrHigh  equ BaseOfLoaderPhyAddr + _dwBaseAddrHigh$/;"	d
dwBaseAddrLow	boot/loader.asm	/^        dwBaseAddrLow   equ BaseOfLoaderPhyAddr + _dwBaseAddrLow$/;"	d
dwDispPos	boot/loader.asm	/^	dwDispPos       equ BaseOfLoaderPhyAddr + _dwDispPos$/;"	d
dwLengthHigh	boot/loader.asm	/^        dwLengthHigh    equ BaseOfLoaderPhyAddr + _dwLengthHigh$/;"	d
dwLengthLow	boot/loader.asm	/^        dwLengthLow equ BaseOfLoaderPhyAddr + _dwLengthLow$/;"	d
dwMCRNumber	boot/loader.asm	/^    dwMCRNumber     equ BaseOfLoaderPhyAddr + _dwMCRNumber$/;"	d
dwMemSize	boot/loader.asm	/^	dwMemSize       equ BaseOfLoaderPhyAddr + _dwMemSize$/;"	d
dwType	boot/loader.asm	/^        dwType      equ BaseOfLoaderPhyAddr + _dwType$/;"	d
eax	include/process.h	/^		u32 eax;        \/* \/                                    *\/$/;"	m	struct:s_stackframe
eax	include/protect.h	/^	u32 eax;$/;"	m	struct:s_tss
ebp	include/process.h	/^		u32 ebp;        \/* |                                    *\/$/;"	m	struct:s_stackframe
ebp	include/protect.h	/^	u32 ebp;$/;"	m	struct:s_tss
ebx	include/process.h	/^		u32 ebx;        \/* |                                    *\/$/;"	m	struct:s_stackframe
ebx	include/protect.h	/^	u32 ebx;$/;"	m	struct:s_tss
ecx	include/process.h	/^		u32 ecx;        \/* |                                    *\/$/;"	m	struct:s_stackframe
ecx	include/protect.h	/^	u32 ecx;$/;"	m	struct:s_tss
edi	include/process.h	/^		u32 edi;        \/* |                                    *\/$/;"	m	struct:s_stackframe
edi	include/protect.h	/^	u32 edi;$/;"	m	struct:s_tss
edx	include/process.h	/^		u32 edx;        \/* |                                    *\/$/;"	m	struct:s_stackframe
edx	include/protect.h	/^	u32 edx;$/;"	m	struct:s_tss
eflags	include/process.h	/^		u32 eflags;     \/* | pushed by CPU during interrupt     *\/$/;"	m	struct:s_stackframe
eip	include/process.h	/^		u32 eip;        \/* \\                                    *\/$/;"	m	struct:s_stackframe
eip	include/protect.h	/^	u32 eip;$/;"	m	struct:s_tss
es	include/process.h	/^		u32 es;     \/* |                                    *\/$/;"	m	struct:s_stackframe
es	include/protect.h	/^	u32 es; $/;"	m	struct:s_tss
esi	include/process.h	/^		u32 esi;        \/* | pushed by save()                   *\/$/;"	m	struct:s_stackframe
esi	include/protect.h	/^	u32 esi;$/;"	m	struct:s_tss
esp	include/process.h	/^		u32 esp;        \/* |                                    *\/$/;"	m	struct:s_stackframe
esp	include/protect.h	/^	u32 esp;$/;"	m	struct:s_tss
esp0	include/protect.h	/^	u32 esp0;   \/* stack pointer to use during interrupt *\/$/;"	m	struct:s_tss
esp1	include/protect.h	/^	u32 esp1;$/;"	m	struct:s_tss
esp2	include/protect.h	/^	u32 esp2;$/;"	m	struct:s_tss
exception	kernel/kernel.asm	/^exception:$/;"	l
exception_handler	kernel/protect.c	/^PUBLIC void exception_handler(int vec_no,int err_code,int eip,int cs,int eflags)$/;"	f
extern	kernel/kernel.asm	/^extern cstart$/;"	l
extern	kernel/kernel.asm	/^extern disp_pos$/;"	l
extern	kernel/kernel.asm	/^extern exception_handler$/;"	l
extern	kernel/kernel.asm	/^extern gdt_ptr$/;"	l
extern	kernel/kernel.asm	/^extern idt_ptr$/;"	l
extern	kernel/kernel.asm	/^extern intrpt_handler$/;"	l
extern	kernel/kernel.asm	/^extern kernel_main$/;"	l
extern	kernel/kernel.asm	/^extern p_proc_ready$/;"	l
extern	kernel/kernel.asm	/^extern tss$/;"	l
extern	lib/kliba.asm	/^extern disp_pos$/;"	l
filename	boot/boot.asm	/^filename          db   "LOADER  BIN",0   ;文件名为11字节$/;"	d
filename	boot/loader.asm	/^filename          db   "KERNEL  BIN",0   ;文件名为11字节$/;"	d
findFile	boot/boot.asm	/^findFile:                        ;开始查找$/;"	l
findFile	boot/loader.asm	/^findFile:                        ;开始查找$/;"	l
finded	boot/boot.asm	/^finded: $/;"	l
finded	boot/loader.asm	/^finded: $/;"	l
finish	boot/boot.asm	/^finish:$/;"	l
finish	boot/loader.asm	/^finish:$/;"	l
flags	include/protect.h	/^	u32 flags;$/;"	m	struct:s_tss
fs	include/process.h	/^		u32 fs;     \/* |                                    *\/$/;"	m	struct:s_stackframe
fs	include/protect.h	/^	u32 fs; $/;"	m	struct:s_tss
gdt	include/global.h	/^EXTERN    DESCRIPTOR   gdt[GDT_SIZE];$/;"	v
gdt_ptr	include/global.h	/^EXTERN    u8           gdt_ptr[6]; \/* 0 ~15: Limit (2 bytes ) $/;"	v
general_protection	kernel/kernel.asm	/^general_protection:$/;"	l
global	kernel/kernel.asm	/^global  hint00$/;"	l
global	kernel/kernel.asm	/^global  hint01$/;"	l
global	kernel/kernel.asm	/^global  hint02$/;"	l
global	kernel/kernel.asm	/^global  hint03$/;"	l
global	kernel/kernel.asm	/^global  hint04$/;"	l
global	kernel/kernel.asm	/^global  hint05$/;"	l
global	kernel/kernel.asm	/^global  hint06$/;"	l
global	kernel/kernel.asm	/^global  hint07$/;"	l
global	kernel/kernel.asm	/^global  hint08$/;"	l
global	kernel/kernel.asm	/^global  hint09$/;"	l
global	kernel/kernel.asm	/^global  hint10$/;"	l
global	kernel/kernel.asm	/^global  hint11$/;"	l
global	kernel/kernel.asm	/^global  hint12$/;"	l
global	kernel/kernel.asm	/^global  hint13$/;"	l
global	kernel/kernel.asm	/^global  hint14$/;"	l
global	kernel/kernel.asm	/^global  hint15$/;"	l
global	kernel/kernel.asm	/^global _start$/;"	l
global	kernel/kernel.asm	/^global bounds_check$/;"	l
global	kernel/kernel.asm	/^global breakpoint_exception$/;"	l
global	kernel/kernel.asm	/^global copr_error$/;"	l
global	kernel/kernel.asm	/^global copr_not_available$/;"	l
global	kernel/kernel.asm	/^global copr_seg_overrun$/;"	l
global	kernel/kernel.asm	/^global divide_error$/;"	l
global	kernel/kernel.asm	/^global double_fault$/;"	l
global	kernel/kernel.asm	/^global general_protection$/;"	l
global	kernel/kernel.asm	/^global inval_opcode$/;"	l
global	kernel/kernel.asm	/^global inval_tss$/;"	l
global	kernel/kernel.asm	/^global nmi$/;"	l
global	kernel/kernel.asm	/^global overflow$/;"	l
global	kernel/kernel.asm	/^global page_fault$/;"	l
global	kernel/kernel.asm	/^global restart$/;"	l
global	kernel/kernel.asm	/^global segment_not_present$/;"	l
global	kernel/kernel.asm	/^global single_step_exception$/;"	l
global	kernel/kernel.asm	/^global stack_exception$/;"	l
global	lib/kliba.asm	/^global	disp_str$/;"	l
global	lib/kliba.asm	/^global  disp_color_str$/;"	l
global	lib/kliba.asm	/^global  in_byte$/;"	l
global	lib/kliba.asm	/^global  out_byte$/;"	l
global	lib/string.asm	/^global	memcpy$/;"	l
gs	include/process.h	/^	    u32 gs;     \/* \\                                    *\/$/;"	m	struct:s_stackframe
gs	include/protect.h	/^	u32 gs; $/;"	m	struct:s_tss
hint00	kernel/kernel.asm	/^hint00:             ; irq 0 --> the clock$/;"	l
hint01	kernel/kernel.asm	/^hint01:             ; irq 1 --> keyboard$/;"	l
hint02	kernel/kernel.asm	/^hint02:             ; irq 2 --> cascade$/;"	l
hint03	kernel/kernel.asm	/^hint03:             ; irq 3 --> second serial$/;"	l
hint04	kernel/kernel.asm	/^hint04:             ; irq 4 --> first serial$/;"	l
hint05	kernel/kernel.asm	/^hint05:             ; irq 5 --> XT winchester$/;"	l
hint06	kernel/kernel.asm	/^hint06:             ; irq 6 --> floppy$/;"	l
hint07	kernel/kernel.asm	/^hint07:             ; irq 7 --> printer$/;"	l
hint08	kernel/kernel.asm	/^hint08:             ; irq 8 --> realtime clock$/;"	l
hint09	kernel/kernel.asm	/^hint09:             ; irq 9 --> irq 2 redirected$/;"	l
hint10	kernel/kernel.asm	/^hint10:             ; irq 10 $/;"	l
hint11	kernel/kernel.asm	/^hint11:             ; irq 11$/;"	l
hint12	kernel/kernel.asm	/^hint12:             ; irq 12$/;"	l
hint13	kernel/kernel.asm	/^hint13:             ; irq 13 --> FPU Exception$/;"	l
hint14	kernel/kernel.asm	/^hint14:             ; irq 14 --> AT winchester$/;"	l
hint15	kernel/kernel.asm	/^hint15:              ; irq 15$/;"	l
idt	include/global.h	/^EXTERN    GATE         idt[IDT_SIZE];$/;"	v
idt_ptr	include/global.h	/^EXTERN    u8           idt_ptr[6]; \/* 0～15:Limit 16~47:Base *\/$/;"	v
in_byte	lib/kliba.asm	/^in_byte:$/;"	l
inc	boot/boot.asm	/^    inc di$/;"	d
inc	boot/loader.asm	/^    inc di$/;"	d
init_8259A	kernel/i8259.c	/^PUBLIC void init_8259A()$/;"	f
init_idt_desc	kernel/protect.c	/^PRIVATE void init_idt_desc(unsigned char vector,u8 desc_type,$/;"	f
init_prot	kernel/protect.c	/^PUBLIC void init_prot()$/;"	f
inito_descriptor	kernel/protect.c	/^PRIVATE void inito_descriptor(DESCIPRTOR* p_desc,u32 base ,u32 limit,u16 attr)$/;"	f
int	boot/boot.asm	/^int 10h$/;"	l
int	boot/boot.asm	/^int 13h  $/;"	l
int	boot/loader.asm	/^int 10h$/;"	l
int_handler	include/type.h	/^typedef void (*int_handler) (); \/*函数指针*\/$/;"	t
intrpt_handler	kernel/i8259.c	/^PUBLIC void intrpt_handler(int irq)$/;"	f
inval_opcode	kernel/kernel.asm	/^inval_opcode:$/;"	l
inval_tss	kernel/kernel.asm	/^inval_tss:$/;"	l
iobase	include/protect.h	/^	u16 iobase; \/* I\/O位图基址大于或等于TSS段界限，就表示没有I\/O许可位图 *\/$/;"	m	struct:s_tss
itoa	lib/klib.c	/^PUBLIC char* itoa(char* str,int num )$/;"	f
jmp	boot/boot.asm	/^jmp short startx		; Start to boot.$/;"	l
jmp	boot/loader.asm	/^jmp startx		; Start to boot.$/;"	l
jmptokernel	boot/loader.asm	/^jmptokernel:$/;"	l
jmptoloader	boot/boot.asm	/^jmptoloader:$/;"	l
jnz	boot/boot.asm	/^	jnz label        ;若是奇数项(注意是从0开始，所以第一项为0 应该算偶数项)則取后三位 and ax,0x0FFF$/;"	l
jnz	boot/loader.asm	/^	jnz label        ;若是奇数项(注意是从0开始，所以第一项为0 应该算偶数项)則取后三位 and ax,0x0FFF$/;"	l
kernel_esp	include/process.h	/^		u32 kernel_esp; \/* <- 'popad' will ignore it            *\/$/;"	m	struct:s_stackframe
kernel_main	kernel/main.c	/^PUBLIC int kernel_main()$/;"	f
ldt	include/protect.h	/^	u32 ldt;$/;"	m	struct:s_tss
ldt_sel	include/process.h	/^	u16 ldt_sel;               \/* gdt selector giving ldt base and limit *\/$/;"	m	struct:s_proc
ldts	include/process.h	/^	DESCRIPTOR ldts[LDT_SIZE]; \/* local descriptors for code and data *\/$/;"	m	struct:s_proc
limit_high_attr2	include/protect.h	/^	u8  limit_high_attr2; $/;"	m	struct:s_descriptor
limit_low	include/protect.h	/^	u16 limit_low;$/;"	m	struct:s_descriptor
memcpy	lib/string.asm	/^memcpy:$/;"	l
mov	boot/boot.asm	/^mov ah,6$/;"	l
mov	boot/boot.asm	/^mov al,0$/;"	l
mov	boot/boot.asm	/^mov ax,cs$/;"	l
mov	boot/boot.asm	/^mov bh,7$/;"	l
mov	boot/boot.asm	/^mov ch,0$/;"	l
mov	boot/boot.asm	/^mov cl,0$/;"	l
mov	boot/boot.asm	/^mov dh,24$/;"	l
mov	boot/boot.asm	/^mov dl,79$/;"	l
mov	boot/boot.asm	/^mov ds,ax$/;"	l
mov	boot/boot.asm	/^mov es,ax$/;"	l
mov	boot/boot.asm	/^mov sp,BaseOfStack$/;"	l
mov	boot/boot.asm	/^mov ss,ax$/;"	l
mov	boot/loader.asm	/^mov ah,6$/;"	l
mov	boot/loader.asm	/^mov al,0$/;"	l
mov	boot/loader.asm	/^mov ax,cs$/;"	l
mov	boot/loader.asm	/^mov bh,7$/;"	l
mov	boot/loader.asm	/^mov ch,0$/;"	l
mov	boot/loader.asm	/^mov cl,0$/;"	l
mov	boot/loader.asm	/^mov dh,24$/;"	l
mov	boot/loader.asm	/^mov dl,79$/;"	l
mov	boot/loader.asm	/^mov ds,ax$/;"	l
mov	boot/loader.asm	/^mov es,ax$/;"	l
mov	boot/loader.asm	/^mov sp,BaseOfStack$/;"	l
mov	boot/loader.asm	/^mov ss,ax$/;"	l
msg_bad	boot/boot.asm	/^msg_bad           db   "Bad clus",0$/;"	d
msg_bad	boot/loader.asm	/^msg_bad           db   "Bad clus",0$/;"	d
msg_badfat	boot/boot.asm	/^msg_badfat        db   "Fat damaged...",0$/;"	d
msg_badfat	boot/loader.asm	/^msg_badfat        db   "Fat damaged...",0$/;"	d
msg_finded	boot/boot.asm	/^msg_finded        db   "Ready!",0$/;"	d
msg_finded	boot/loader.asm	/^msg_finded        db   "Kernel!",0$/;"	d
msg_nofind	boot/boot.asm	/^msg_nofind        db   "No Loader",0$/;"	d
msg_nofind	boot/loader.asm	/^msg_nofind        db   "No kernel",0$/;"	d
nextfile	boot/boot.asm	/^nextfile:       ;转到下一个文件$/;"	l
nextfile	boot/loader.asm	/^nextfile:       ;转到下一个文件$/;"	l
nmi	kernel/kernel.asm	/^nmi:$/;"	l
odd	boot/boot.asm	/^odd               db   0$/;"	d
odd	boot/loader.asm	/^odd               db   0$/;"	d
offset_hight	include/protect.h	/^	u16  offset_hight;$/;"	m	struct:s_gate
offset_low	include/protect.h	/^    u16  offset_low;$/;"	m	struct:s_gate
org	boot/boot.asm	/^org 07c00h     ;bios 可将引导扇区加载到0:7c00 处 并开始执行$/;"	l
org	boot/loader.asm	/^org 0100h    $/;"	l
out_byte	lib/kliba.asm	/^out_byte:$/;"	l
overflow	kernel/kernel.asm	/^overflow:$/;"	l
p_name	include/process.h	/^	char p_name[16];           \/* name of the process *\/$/;"	m	struct:s_proc
p_proc_ready	include/global.h	/^EXTERN    PROCESS*  p_proc_ready;$/;"	v
page_fault	kernel/kernel.asm	/^page_fault:$/;"	l
pid	include/process.h	/^	u32 pid;                   \/* process id passed in from MM *\/$/;"	m	struct:s_proc
pop	boot/loader.asm	/^	pop dx$/;"	d
pop	kernel/kernel.asm	/^	pop ds$/;"	d
proc_table	kernel/global.c	/^PUBLIC PROCESS   proc_table[MAX_TASKS];$/;"	v
push	boot/boot.asm	/^    push dx     ;保存fat值在扇区中的偏移$/;"	d
push	boot/loader.asm	/^    push dx     ;保存fat值在扇区中的偏移$/;"	d
push	boot/loader.asm	/^    push dx$/;"	d
regs	include/process.h	/^	STACK_FRAME regs;          \/* process registers saved in stack frame *\/$/;"	m	struct:s_proc
restart	kernel/kernel.asm	/^restart:$/;"	l
retaddr	include/process.h	/^		u32 retaddr;    \/* return addr for kernel.asm::save()   *\/$/;"	m	struct:s_stackframe
s_descriptor	include/protect.h	/^typedef struct s_descriptor  \/* 8字节  *\/$/;"	s
s_gate	include/protect.h	/^typedef struct s_gate$/;"	s
s_proc	include/process.h	/^typedef struct s_proc {$/;"	s
s_stackframe	include/process.h	/^typedef struct s_stackframe { $/;"	s
s_tss	include/protect.h	/^typedef struct s_tss{$/;"	s
secnum	boot/boot.asm	/^secnum            db   0             ;扇区号$/;"	d
secnum	boot/loader.asm	/^secnum            db   0             ;扇区号$/;"	d
seg2phys	kernel/protect.c	/^PUBLIC u32 seg2phys(u16 seg)$/;"	f
segment_not_present	kernel/kernel.asm	/^segment_not_present:$/;"	l
selector	include/protect.h	/^	u16  selector;$/;"	m	struct:s_gate
single_step_exception	kernel/kernel.asm	/^single_step_exception:$/;"	l
ss	include/process.h	/^		u32 ss;     \/* \/                                    *\/$/;"	m	struct:s_stackframe
ss	include/protect.h	/^	u32 ss; $/;"	m	struct:s_tss
ss0	include/protect.h	/^	u32 ss0;    \/*   "   segment  "  "    "        "     *\/$/;"	m	struct:s_tss
ss1	include/protect.h	/^	u32 ss1;$/;"	m	struct:s_tss
ss2	include/protect.h	/^	u32 ss2;$/;"	m	struct:s_tss
stack_exception	kernel/kernel.asm	/^stack_exception:$/;"	l
startx	boot/boot.asm	/^startx:$/;"	l
startx	boot/loader.asm	/^startx:$/;"	l
szMemChkTitle	boot/loader.asm	/^	szMemChkTitle       equ BaseOfLoaderPhyAddr + _szMemChkTitle$/;"	d
szRAMSize	boot/loader.asm	/^	szRAMSize       equ BaseOfLoaderPhyAddr + _szRAMSize$/;"	d
szReturn	boot/loader.asm	/^	szReturn        equ BaseOfLoaderPhyAddr + _szReturn$/;"	d
task_stack	kernel/global.c	/^PUBLIC   char    task_stack[STACK_SIZE_TOTAL];$/;"	v
times	boot/boot.asm	/^times  510-($-$$)  db  0 ; 填充剩下的空间 使生成的二进制代码恰好为512字节$/;"	l
trap	include/protect.h	/^	u16 trap;$/;"	m	struct:s_tss
tss	include/global.h	/^EXTERN    TSS       tss;$/;"	v
u16	include/type.h	/^typedef unsigned short u16;$/;"	t
u32	include/type.h	/^typedef unsigned int   u32;$/;"	t
u8	include/type.h	/^typedef unsigned char  u8;$/;"	t
vir2phys	include/protect.h	97;"	d
xor	boot/boot.asm	/^xor ah,ah$/;"	l
xor	boot/boot.asm	/^xor dl,dl$/;"	l
